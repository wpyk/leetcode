# 118.119. Piscal's Trangle I II     
## Description I   
Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.    
## Description II   
Given a non-negative index k where k ≤ 33, return the kth index row of the Pascal's triangle.  
Note that the row index starts from 0.
## Example I 
Input: 5
Output:
	
	     [1],
	    [1,1],
	   [1,2,1],
	  [1,3,3,1],
	 [1,4,6,4,1]
	     
## Example II   
Input: 3
Output: [1,3,3,1]

### Note/思路/考え方    
针对第一题，创建一个list，其中每一个元素也是list。每一次创建一行所有元素都为1的list，list长度取决于在第几行（假设为第i行）。然后通过上一行的取值，将2~i-1的位置的数字替换。  
针对第二题，这道题有两种解法，一种是先实现第一题，然后将其最后一行输出。另一种是指创建1个list，然后list本身实现自身迭代。


### Code/代码/コード   I 解法1  
```java
	
	class Solution {
	    public List<List<Integer>> generate(int numRows) {
	        
	        List<List<Integer>> result = new ArrayList<>();
	        if(numRows <= 0){
	            return result;
	        }
	
	        for(int i = 0; i < numRows; i++){ 
	            List<Integer> list = new ArrayList<>(Collections.nCopies(i+1, 1));
	            if(i > 1){
	                for(int j = 1; j <= i-1; j++ ){
	                    int k = result.get(i-1).get(j-1)+result.get(i-1).get(j);
	                    list.set(j, k);
	                }
	            }
	            
	            result.add(list);
	        }
	        
	        
	        return result;
	    }
	}
	```
	### I 解法2  
	```java
	public class Solution {
	    public List<List<Integer>> generate(int numRows) {
	        List<List<Integer>> res = new ArrayList<>();
	        if(numRows <= 0)
	            return res;
	        ArrayList<Integer> list = new ArrayList<>();
	        list.add(1);
	        res.add(list);
	        
	        for(int i = 1; i < numRows; i++) {
	            ArrayList<Integer> temp = new ArrayList<>();
	            temp.add(1);
	            
	            for(int j = 1; j < res.get(i - 1).size(); j++)
	                temp.add(res.get(i - 1).get(j) + res.get(i - 1).get(j - 1));
	                
	            temp.add(1);
	            res.add(temp);
	        }
	        
	        return res;
	    }
	}
```
### Code/代码/コード   II 解法1  
```java

	class Solution {
	    public List<Integer> getRow(int rowIndex) {
	        List<List<Integer>> result = new ArrayList<>();
	        
	        for(int i = 0; i <= rowIndex; i++){ 
	            List<Integer> list = new ArrayList<>(Collections.nCopies(i+1, 1));
	            
	            if(i > 1){
	                for(int j = 1; j <= i-1; j++ ){
	                    int k = result.get(i-1).get(j-1)+result.get(i-1).get(j);
	                    list.set(j, k);
	                }
	            }
	            
	            result.add(list);
	        }
	        
	        
	        return result.get(rowIndex);
	    }
	}
	```
	### II 解法2  
	```java
	class Solution {
	    public List<Integer> getRow(int rowIndex) {
	        List<Integer> result = new ArrayList<>();
	        for (int i = 0; i <= rowIndex; i++) {
	            result.add(0);
	        }
	
	        result.set(0, 1);
	        if(rowIndex == 0){
	            return result;
	        }
	        for(int i = 1; i <= rowIndex; i++){
	            for(int j = i; j >=1; j--){
	                result.set(j, result.get(j-1)+result.get(j));
	            }
	        }
	
	        return result;
	    }
	}

```



