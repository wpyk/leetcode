# 94. Binary Tree Inorder Traversal
# 144. Binary Tree Preorder Traversal
# 145. Binary Tree Postorder Traversal

## Description

Given a binary tree, return the inorder, preorder and postorder traversal of its nodes' values.

### Example

For example, this binary tree [1,null,2,3]：

   1
    \
     2
    /
   3

preorder:[1,2,3]  
inorder:[1,3,2]  
postorder:[3,2,1]

### Note/思路/考え方

遍历二叉树是非常套路的题，采用递归做法，最主要的是分清这三个遍历的顺序，pre/in/post指的都是中间节点的相对遍历顺序。遍历时一般需要两个变量，一个用于存储值，一个用于传递节点。代码见下：  

```java



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> treeTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if(root == null){
            return result;
        }
        
        preorder(root, result);
        //inorder(root, result);
        //postorder(root, result);
        return result;
    }
    
    // Preorder
    private void preorder(TreeNode node, List<Integer> result ){
        if(node == null){
            return;
        }
        
        result.add(node.val);
        preorder(node.left, result);
        preorder(node.right, result);
    }

    //inorder

     private void inorder(List<Integer> result, TreeNode node){
        if(node == null){
            return;
        }
        
        inorder(result, node.left);
        result.add(node.val);
        inorder(result, node.right);
    }

    //postorder
    private void postorder(List<Integer> result, TreeNode node){
        if(node == null){
            return;
        }
        postorder(result, node.left);
        postorder(result, node.right);
        result.add(node.val);
    }

}
```

