# 104. Maximum Depth of Binary Tree

## Description

Given a binary tree, find its maximum depth.
The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

### Example
Given binary tree [3,9,20,null,null,15,7]  
output:3

### tag 
Tree, dfs

### Note/思路/考え方
解法一： 这道题就是非常典型的深度优先算法。通过一个helper函数来遍历每一个节点，并在函数里继续调用自己，传入的节点参数变成当前节点的左或右节点。每一次自身调用，说明层数增加了1，返回值也相应的加1就行了。注意，在每次调用helper函数的时候，return的部分里，1都代表自己这一层的当前节点。    
```java   
	class Solution {
	    public int maxDepth(TreeNode root) {
	        int result = helper(root);
	        return result;
	    }
	    
	    private int helper(TreeNode node){
	        if(node == null){
	            return 0;
	        }
	        
	        if(node.left == null && node.right == null){
	            return 1;
	        }
	        
	        int left = helper(node.left);
	        int right = helper(node.right);
	        
	        return 1 + (left>right?left:right);
	    }    
	}
```

解法二：在这个解法中，helper函数里增加了一个变量temp，用来存储当前层数。然后将当前节点的左右节点作为参数进行下一轮调用时，temp++。当执行到叶子节点，即node.left == null && node.right == null 时，更新result。
```java
	class Solution {
	    int result = 0;
	    public int maxDepth(TreeNode root) {
	        if(root == null){
	            return 0;
	        }
	        helper(root,0);
	        return result;
	    }
	    
	    private void helper(TreeNode node,int temp){
	        
	        if(node.left == null && node.right == null){
	            result = Math.max(result,temp+1);
	        }
	        
	        if(node.left != null){
	            helper(node.left, temp+1); 
	        }
	        if(node.right != null){
	            helper(node.right, temp+1);
	        }
	        
	
	    }
    }

```
### 注意点

深度优先和回溯的区别