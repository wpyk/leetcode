/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder2(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null){
            return result;
        }
        helper(root, 0, result);
        return result;
    }
    
    private void helper(TreeNode root, int level, List<List<Integer>> result){
        if(root == null){
            return;
        }
        if(result.size() < level + 1){
            result.add(new ArrayList());
        }
        result.get(level).add(root.val);
        
        helper(root.left, level + 1, result);
        helper(root.right, level + 1, result);
    }
    
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null){
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> temp = new ArrayList<>();
            for(int i = 0; i<size;i++){
                TreeNode node = queue.poll();
                if(node.left!=null){
                    queue.add(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                }
                temp.add(node.val);
                System.out.print(node.val);
            }
            result.add(temp);
        }
        return result;
    }
}