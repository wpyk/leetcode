# 108. Convert Sorted Array to Binary Search Tree

## Description

Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

### Example
Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

        0
      /  \
     -3   9
     /    /
    -10  5


### tag 
Tree， convert a tree

### Note/思路/考え方
这道题要求构建的是BST，即对于任何一个节点来说，其左子树上的点都比自身小，同时小于其右子树。这说明，当给定一个递增的数组的时候，其中位数就是这个数组中明确的中间节点。当中间节点确定后，我们将该节点左侧的数用于构建左子树，右侧的数用来构建右子树。这个过程对于任何一个节点都是一样的，因此可以通过dfs方法解决。
代码如下：
```java

    class Solution {
	    public TreeNode sortedArrayToBST(int[] nums) {
	        return helper(nums, 0, nums.length-1);
	    }
	    
	    private TreeNode helper(int[] nums, int left, int right){
	        if(left > right){
	            return null;
	        }
	        TreeNode node = new TreeNode(nums[(left+right)/2]);
	        
	        node.left = helper(nums, left, (left+right)/2-1);
	        node.right = helper(nums,(left + right)/2+1,right);
	        
	        return node;
	    }
    }
```