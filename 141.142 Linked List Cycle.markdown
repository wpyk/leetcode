# Linked List Cycle I II
## Description   
   Given a linked list, determine if it has a cycle in it.(I)  
   输入为一个链表，判断其是否含有环。(I)       
   Given a linked list, return the node where the cycle begins. If there is no cycle, return null.(II)   
   输入为一个链表，判断其是否有环，若有环，则输出环开始的节点位置，若没有，输出null。(II)
## Example   
   (I) Input: head = [3,2,0,-4], pos = 1  
       Output: true     
       Explanation: There is a cycle in the linked list, where tail connects to the second node.

   (II) Input: head = [3,2,0,-4], pos = 1  
        Output: tail connects to node index 1   
        Explanation: There is a cycle in the linked list, where tail connects to the second node.

### Note/思路/考え方   
    这两道题都是判断给定链表中是否存在环，第一道较为简单，只是做判断。第二道要求输出环的起始位置。 这两道题想要检验的做题技巧是快慢指针。
#### (I) There are two ways to solve this question./第一道题有两种做法。/解決策二つ    
     (1) Traversing the linked list and point each of its node to head. If there is no cycle, must exist a node1 who satisfies node1.next == null. Else there must be a node2 satisfying node2.next == head before we point it to head.
     遍历这个链表，将遍历到的所有点都指向head.若其不存在环，则一定存在某个节点node1满足:node1.next == null.若存在环，则一定存在某个节点node2满足node2.next == head.       
     (2) Fast and slow method. Introduce two pointer, fast and slow. fast can move to the second node after it every round while slow can only move to its next node. If there is a cycle, these two pointers must meet at some time. If not, there's no cycle.     
     快慢指针方法。快指针一次后移两位，慢指针一次后移一位。如果存在环，则二者在某一时间一定会相遇。否则不存在环。    
#### (II) Fast and slow method./快慢指针方法/解決策    


### Code/代码/コード    
I-(1)  
```java
public class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null||head.next == null){
            return false;
        }
        
        ListNode current = head;
        ListNode next = current;
        
        while(current.next != null){
            if(current.next != head){
                next = current.next;
                current.next = head;// 将遍历到的节点都指向head
                current = next;
            }else{
                return true;
            }
        }
        
        return false;
    }
}
```    
I-(2)  

