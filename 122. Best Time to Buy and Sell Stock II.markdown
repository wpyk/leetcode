# 122. Best Time to Buy and Sell Stock II

## Description

Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

### Example
Input: [7,1,5,3,6,4]  
Output: 7  
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
 
Input: [1,2,3,4,5]  
Output: 4  
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.

### tag 
数组的最大最小问题

### Note/思路/考え方
首先我们要思考一个问题，假设这一个给定的数组是[1,2,3]，从实际角度来说，可以有一下两种购入和卖出方案：  
1. 第一天买入，第二天卖出。同时第二天买入第三天卖出。   
2. 第一天买入，第三天卖出。  
本质上二者是一样的，但是从实际编程角度来讲，第一种操作方案的可执行性要高很多。只要明天比今天价格高，那就今天买明天卖。本题的思路也是如此，从数组的起始位置开始遍历，只要下一位比当前位高，就将二者的差值计算入total中。代码如下：  
```java
    class Solution {
	    public int maxProfit(int[] prices) {
	        int total = 0;
	        for(int i = 0; i < prices.length-1; i++){
	            if(prices[i]<prices[i+1]){
	                total += prices[i+1]-prices[i];
	            }
	        }
	        
	        return total;
	    }
	}
```